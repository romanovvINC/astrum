@using Astrum.Api.Components

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="@assemblies">
        <Found Context="routeData">
            @*<RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />*@
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <NotAuthorizedHandler></NotAuthorizedHandler>
                </NotAuthorized>
            </AuthorizeRouteView> 
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@*
<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <NotAuthorized>
                <RedirectToSignin />
                <h2>Authorization Required</h2>
                <p>This page is restricted, please log in to the SSO with your credentials.</p>
            </NotAuthorized>
            <Authorizing>
                <p>Authentication in progress.</p>
            </Authorizing>

        </AuthorizeRouteView> 
    </Found>

    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>*@

<AntContainer />

@code {
    IEnumerable<System.Reflection.Assembly> assemblies = new List<System.Reflection.Assembly>();

    protected async override Task OnInitializedAsync()
    {
        assemblies = assemblies.Append(typeof(Astrum.Articles.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Project.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Account.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.News.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Market.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Logging.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.SampleData.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Telegram.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Inventory.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.TrackerProject.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Appeal.Admin.ExampleJsInterop).Assembly);
        assemblies = assemblies.Append(typeof(Astrum.Permissions.Admin.ExampleJsInterop).Assembly);
    }
}
