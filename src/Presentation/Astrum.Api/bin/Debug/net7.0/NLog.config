<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="internal-nlog-AspNetCore.txt">

	<!-- enable asp.net core layout renderers -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
	</extensions>

	<!-- the targets to write to -->
	<targets>
		<!-- File Target for all log messages with basic details -->
		<!--<target xsi:type="File" name="allfile" fileName="c:\temp\nlog-AspNetCore-all-${shortdate}.log"-->
		<!--layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}" />-->

		<!-- File Target for own log messages with extra web details using some ASP.NET core renderers -->
		<!--<target xsi:type="File" name="ownFile-web" fileName="c:\temp\nlog-AspNetCore-own-${shortdate}.log"-->
		<!--layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}| body: ${aspnet-request-posted-body}" />-->

		<!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
		<!--<target xsi:type="Console" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}" />-->

		<!-- Логи истории заказов -->
		<!--<target xsi:type="Database" name="orderDbLog"
				dbProvider="Npgsql.NpgsqlConnection, Npgsql"
				connectionString="${configsetting:name=ConnectionStrings.DefaultConnection}">
			<commandText>
				INSERT INTO public."LogOfOrders"
				("UserSessionId", "OrderUserSessionNumber", "IsValid", "LogData", "CreatedAt", "LogLevel")
				VALUES(@userSessionId, @sessionNumber, @isValid, @logData, @createdAt, @logLevel);
			</commandText>

			<parameter name="@logLevel" dbType="Int32"  layout="${level}" />
			<parameter name="@createdAt" dbType="DateTime" layout="${longdate:universalTime=true}" />
			<parameter name="@isValid" dbType="Boolean" layout="${event-properties:IsValid}" />
			<parameter name="@sessionNumber" dbType="Int32" layout="${event-properties:OrderUserSessionNumber}" />
			<parameter name="@userSessionId" dbType="Int64" layout="${event-properties:UserSessionId}" />
			<parameter name="@logData" dbType="NpgsqlDbType.Jsonb" allowDbNull="true" layout="${event-properties:LogData}" />
		</target> -->

		<target xsi:type="Database" name="httpDbLogs"
		        dbProvider="Npgsql.NpgsqlConnection, Npgsql"
		        connectionString="${configsetting:name=ConnectionStrings.BaseConnection}">
			<commandText>
				INSERT INTO "Logs"."HttpDataLogs" ("Id", "StatusCode", "Path", "Description", "BodyRequest", 
				"RequestResponse", "DateCreated", "LogLevel", "TypeRequest", "Module")
				VALUES(@id, @statusCode, @path, @description, @bodyRequest, @requestResponse, @dateCreated, 
				@logLevel, @typeRequest, @module);
			</commandText>
			<parameter name="@id" dbType="Guid" layout="${guid}" />
			<parameter name="@statusCode" dbType="NpgsqlDbType.Text"  layout="${event-properties:StatusCode}" />
			<parameter name="@path" dbType="NpgsqlDbType.Text"  layout="${event-properties:Path}" />
			<parameter name="@description" dbType="NpgsqlDbType.Text"  layout="${event-properties:Description}" />
			<parameter name="@bodyRequest" dbType="NpgsqlDbType.Text"  layout="${event-properties:BodyRequest}" />
			<parameter name="@requestResponse" dbType="NpgsqlDbType.Text"  layout="${event-properties:RequestResponse}" />
			<parameter name="@dateCreated" dbType="DateTime" layout="${longdate:universalTime=true}" />
			<parameter name="@logLevel" dbType="Int32"  layout="${level}" />
			<parameter name="@typeRequest" dbType="Int32"  layout="${event-properties:TypeRequest}"/>
			<parameter name="@module" dbType="Int32"  layout="${event-properties:Module}"/>
		</target>
		
		<target xsi:type="Database" name="adminDbLogs"
		        dbProvider="Npgsql.NpgsqlConnection, Npgsql"
		        connectionString="${configsetting:name=ConnectionStrings.BaseConnection}">
			<commandText>
				INSERT INTO "Logs"."AdminDataLogs" ("Id", "Description", "BodyRequest", "RequestResponse",
				"Status","DateCreated", "LogLevel", "Module")
				VALUES(@id, @description, @bodyRequest, @requestResponse, @status, @dateCreated,
				@logLevel, @module);
			</commandText>
			<parameter name="@id" dbType="Guid" layout="${guid}" />
			<parameter name="@description" dbType="NpgsqlDbType.Text"  layout="${event-properties:Description}" />
			<parameter name="@bodyRequest" dbType="NpgsqlDbType.Text"  layout="${event-properties:BodyRequest}" />
			<parameter name="@requestResponse" dbType="NpgsqlDbType.Text"  layout="${event-properties:RequestResponse}" />
			<parameter name="@status" dbType="Int32"  layout="${event-properties:Status}" />
			<parameter name="@dateCreated" dbType="DateTime" layout="${longdate:universalTime=true}" />
			<parameter name="@logLevel" dbType="Int32"  layout="${level}" />
			<parameter name="@module" dbType="Int32"  layout="${event-properties:Module}"/>
		</target>
	</targets>



	<!-- rules to map from logger name to target -->
	<rules>
		<!--All logs, including from Microsoft-->
		<!--<logger name="*" minlevel="Trace" writeTo="allfile" />-->

		<!--Output hosting lifetime messages to console target for faster startup detection -->
		<!--<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole, ownFile-web" final="true" />-->

		<!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
		<!--<logger name="Microsoft.*" maxlevel="Info" final="true" />
    <logger name="System.Net.Http.*" maxlevel="Info" final="true" />

    <logger name="*" minlevel="Trace" writeTo="ownFile-web" />-->

		<logger name="Astrum.Logging.Services.LogHttpService" minlevel="Info" writeTo="httpDbLogs" />
		<logger name="Astrum.Logging.Services.LogAdminService" minlevel="Info" writeTo="adminDbLogs"/>
	</rules>
</nlog>
