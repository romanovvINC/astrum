@inject IBannersService _bannersService
@inject ILogAdminService _logger

<div style="display:flex; flex-wrap: wrap; width:100%; grid-gap:22px">
    @foreach (var banner in Banners)
    {
        <div style="width: 41vw; height: 14vw;">
            <div style="width: 100%; height: 12vw; cursor:pointer; position:relative;">
                <Popconfirm Title="Удалить баннер?" OnConfirm="async () => await DeleteBanner(banner.Id)" OkText="Да" CancelText="Нет">
                    <Button Type="@ButtonType.Primary"
                            Danger
                            Icon="@IconType.Outline.Delete"
                            Size="middle"
                            style="position: absolute; left: 92%; top:20%" />
                </Popconfirm>
                <img onclick="@(() => ToggleBanner(banner))" class="@(banner.IsActive ? "activeBanner" : "")" style="width:100%; height:100%; 
                                                                                                                     border-radius:10px; object-fit: cover;" src="@banner.PictureS3Link">
            </div>
            <br/>
            <b style="font-size:24px; margin-bottom:15px; margin-left:5px;">@banner.Title</b>
        </div>
    }
</div>

<style>
    .activeBanner {
        border: solid;
        border-color: blueviolet;
    }
</style>

@code {
    [Parameter] public List<BannerForm> Banners { get; set; }
    [Parameter] public EventCallback OnBannerChanged { get; set; }

    public async Task ToggleBanner(BannerForm banner)
    {
        banner.IsActive = !banner.IsActive;
        await _bannersService.UpdateBanner(banner.Id, banner);
        await OnBannerChanged.InvokeAsync();
        StateHasChanged();
    }

    public async Task DeleteBanner(Guid id)
    {
        var result = await _bannersService.DeleteBanner(id);
        _logger.Log(id, result, "Удалён баннер.", Logging.Entities.ModuleAstrum.News);
        Banners.Remove(Banners.FirstOrDefault(banner => banner.Id == id));
        await OnBannerChanged.InvokeAsync();
        StateHasChanged();
    }
}
