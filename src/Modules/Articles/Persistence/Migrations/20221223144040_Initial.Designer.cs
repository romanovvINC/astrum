// <auto-generated />
using System;
using Astrum.Articles;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Astrum.Articles.Migrations
{
    [DbContext(typeof(ArticlesDbContext))]
    [Migration("20221223144040_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Articles")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Astrum.Articles.Aggregates.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReadingTime")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles", "Articles");
                });

            modelBuilder.Entity("Astrum.Articles.Aggregates.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Authors", "Articles");
                });

            modelBuilder.Entity("Astrum.Articles.Aggregates.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories", "Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e708c94-965f-458f-96b8-370d8ea8104c"),
                            DateCreated = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8269), new TimeSpan(0, 0, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8272), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Дизайн",
                            Version = -1
                        },
                        new
                        {
                            Id = new Guid("7d6fef20-3793-485b-834f-049d9e4a2b44"),
                            DateCreated = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8274), new TimeSpan(0, 0, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8275), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Аналитика",
                            Version = -1
                        },
                        new
                        {
                            Id = new Guid("134240e2-687c-43f5-8b41-628bbf24927b"),
                            DateCreated = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8277), new TimeSpan(0, 0, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8277), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Back-end разработка",
                            Version = -1
                        },
                        new
                        {
                            Id = new Guid("615cd692-36f4-42c9-a195-5f1d5b5aa311"),
                            DateCreated = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8280), new TimeSpan(0, 0, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8280), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Front-end разработка",
                            Version = -1
                        },
                        new
                        {
                            Id = new Guid("9151f57b-ed20-4c9a-a167-ea725c239da9"),
                            DateCreated = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8283), new TimeSpan(0, 0, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8283), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "DevOps",
                            Version = -1
                        },
                        new
                        {
                            Id = new Guid("27e5480a-91cd-45c5-ba03-0d894e068340"),
                            DateCreated = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8287), new TimeSpan(0, 0, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8288), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Инструкции и гайдлайны",
                            Version = -1
                        },
                        new
                        {
                            Id = new Guid("ededcde2-ad3d-4e47-857a-fea9f3d81e62"),
                            DateCreated = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8407), new TimeSpan(0, 0, 0, 0, 0)),
                            DateModified = new DateTimeOffset(new DateTime(2022, 12, 23, 14, 40, 40, 736, DateTimeKind.Unspecified).AddTicks(8408), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Другое",
                            Version = -1
                        });
                });

            modelBuilder.Entity("Astrum.Articles.Aggregates.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Tags", "Articles");
                });

            modelBuilder.Entity("Astrum.SharedLib.Persistence.Models.Audit.AuditHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Changed")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("AuditHistory", "Articles");
                });

            modelBuilder.Entity("Astrum.Articles.Aggregates.Article", b =>
                {
                    b.HasOne("Astrum.Articles.Aggregates.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astrum.Articles.Aggregates.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Astrum.Articles.Aggregates.Tag", b =>
                {
                    b.HasOne("Astrum.Articles.Aggregates.Article", null)
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId");
                });

            modelBuilder.Entity("Astrum.Articles.Aggregates.Article", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
